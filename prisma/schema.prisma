generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username     String         @id @db.VarChar(100)
  email        String         @unique @db.VarChar(100)
  name         String         @db.VarChar(100)
  password     String         @db.VarChar(100)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  refreshToken RefreshToken[]
  companyId    Int?

  @@map("users")
}

model Card {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  logo      String   @db.VarChar(500)
  Mail      Mail[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     String   @db.VarChar(100)
  textColor String   @db.VarChar(100)

  @@map("cards")
}

model Mascot {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  logo      String   @db.VarChar(500)
  Mail      Mail[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     String   @db.VarChar(100)
  textColor String   @db.VarChar(100)

  @@map("mascots")
}

model Mail {
  id         Int       @id @default(autoincrement())
  from       String    @db.VarChar(100)
  to         String    @db.VarChar(500)
  body       String    @db.VarChar(100000)
  header     String    @db.VarChar(100000)
  photo      String?   @db.VarChar(500)
  username   String?   @db.VarChar(100)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  closing    String    @db.VarChar(100000)
  color      String    @default("red") @db.VarChar(100)
  Card       Card?     @relation(fields: [cardId], references: [id])
  cardId     Int?
  Envelope   Envelope? @relation(fields: [envelopeId], references: [id])
  envelopeId Int?
  Mascot     Mascot?   @relation(fields: [mascotId], references: [id])
  mascotId   Int?

  @@map("mails")
}

model Envelope {
  id        Int      @id @default(autoincrement())
  Mail      Mail[]
  color     String   @db.VarChar(100)
  textColor String   @db.VarChar(100)
  name      String   @unique @db.VarChar(100)
  logo      String   @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("envelops")
}

model RefreshToken {
  id           Int       @id @default(autoincrement())
  refreshToken String
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  User         User?     @relation(fields: [username], references: [username], onUpdate: Cascade, onDelete: Cascade)
  username     String?   @db.VarChar(100)

  @@map("refresh_tokens")
}
