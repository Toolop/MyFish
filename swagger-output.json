{
  "swagger": "2.0",
  "info": {
    "title": "myFish API",
    "description": "API documentation for myFish platform â€“ powered by AgriciaTech.",
    "version": "1.0.0",
    "contact": {
      "name": "Support Team",
      "email": "support@agriciatech.com",
      "url": "https://agriciatech.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication routes"
    },
    {
      "name": "Users",
      "description": "User management"
    },
    {
      "name": "Farms",
      "description": "Fish farm operations"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter your bearer token in the format **Bearer &lt;token>**"
    }
  },
  "paths": {
    "/v1/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "description": "Adds a new user to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new user data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/UserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Fetch all users from the database.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Query parameters for filtering users",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserQueryEntities"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Query parameters for filtering users",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserQueryEntities"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Query parameters for filtering users",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserQueryEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get users successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "description": "Fetch currently authenticated user.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get user successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/UserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/users/:username": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by username",
        "description": "Fetch user by username.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "User username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get user successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/UserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user of username",
        "description": "Update user of username.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "User username",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for the user",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update user successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/UserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user by username",
        "description": "Delete user by username.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "User username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete user successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/UserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "Login as a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new user data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/authEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "accessToken": {
                  "type": "string",
                  "example": "string"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh Access Token",
        "description": "Refresh access token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Cookie",
            "in": "cookie",
            "description": "Refresh token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "accessToken": {
                  "type": "string",
                  "example": "string"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/roles": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create a new role",
        "description": "Adds a new role to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new role data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RoleCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Role created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RoleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all roles",
        "description": "Fetch all roles from the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get roles successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/role": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get current role",
        "description": "Fetch currently authenticated role.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get role successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RoleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/roles/:id": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role by ID",
        "description": "Fetch role by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Role ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get role successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RoleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update role of ID",
        "description": "Update role of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Role ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for the role",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RoleCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update role successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RoleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete role by ID",
        "description": "Delete role by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Role ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete role successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RoleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/sidebars": {
      "post": {
        "tags": [
          "Sidebars"
        ],
        "summary": "Create a new sidebar",
        "description": "Adds a new sidebar to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new sidebar data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SidebarCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Sidebar created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Sidebars"
        ],
        "summary": "Get all sidebar",
        "description": "Fetch all sidebars.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get sidebar successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SidebarEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/sidebar": {
      "get": {
        "tags": [
          "Sidebars"
        ],
        "summary": "Get current user",
        "description": "Fetch current user",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get sidebar successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SidebarEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/sidebars/:id": {
      "get": {
        "tags": [
          "Sidebars"
        ],
        "summary": "Get sidebar by ID",
        "description": "Fetch sidebar by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Sidebar ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get sidebar successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sidebars"
        ],
        "summary": "Update sidebar of ID",
        "description": "Update sidebar of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Sidebar ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for sidebar",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SidebarCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update sidebar successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sidebars"
        ],
        "summary": "Delete sidebar by ID",
        "description": "Delete sidebar by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Sidebar ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete sidebar successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/roleusers": {
      "post": {
        "tags": [
          "Role User"
        ],
        "summary": "Create a new Role User connection",
        "description": "Adds a new role-user entry to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RRoleUserCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Role-User created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleUserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Role User"
        ],
        "summary": "Get all Role User connections",
        "description": "Fetch all role-user entries from the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get Role-User successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RRoleUserEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/roleusers/:id": {
      "get": {
        "tags": [
          "Role User"
        ],
        "summary": "Get Role User connection by ID",
        "description": "Fetch role-user entry by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role-user entry to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Role-User successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleUserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Role User"
        ],
        "summary": "Update Role User of ID",
        "description": "Update role-user entry of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role-user entry to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RRoleUserCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Role-User successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleUserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role User"
        ],
        "summary": "Delete Role User by ID",
        "description": "Delete role-user entry by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role-user entry to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Role-User successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleUserEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/rolesidebars": {
      "post": {
        "tags": [
          "Role Sidebars"
        ],
        "summary": "Create a new Role Sidebar connection",
        "description": "Adds a new role-sidebar entry to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RRoleSidebarCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Role-Sidebar created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleSidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Role Sidebars"
        ],
        "summary": "Get all Role Sidebar connection",
        "description": "Fetch all role-sidebar entries from the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get Role-Sidebar successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RRoleSidebarEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/rolesidebar": {
      "get": {
        "tags": [
          "Role Sidebars"
        ],
        "summary": "Get current user",
        "description": "Fetch current user",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get Role-Sidebar successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RRoleSidebarEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/rolesidebars/:id": {
      "get": {
        "tags": [
          "Role Sidebars"
        ],
        "summary": "Get Role Sidebars by ID",
        "description": "Fetch role-sidebar data by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role-sidebar to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Role-Sidebar successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleSidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Role Sidebars"
        ],
        "summary": "Update Role Sidebars of ID",
        "description": "Update role-sidebar of ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role-sidebar to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data to be used for update",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RRoleSidebarCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Role-Sidebar successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleSidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role Sidebars"
        ],
        "summary": "Delete Role Sidebars by ID",
        "description": "Delete role-sidebar by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role-sidebar to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Role-Sidebar successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleSidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/rolesidebars/upsert-batch": {
      "post": {
        "tags": [
          "Role Sidebars"
        ],
        "summary": "Upsert Batch Role Sidebars",
        "description": "Update role-sidebar (if already exists) or create new role-sidebar.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Array of data to be used for upsert",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RoleSidebarCreateOrUpdateEntities"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upsert Batch Role-Sidebar successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/RRoleSidebarEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/companies": {
      "post": {
        "tags": [
          "companies"
        ],
        "summary": "Create a new company",
        "description": "Adds a new company to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new company data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CompanyCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Company created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/CompanyEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Get all companies",
        "description": "Fetch all companies from the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get companies successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/company": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Get current company",
        "description": "Fetch currently authenticated company.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get company successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/CompanyEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/companies/:id": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Get company by ID",
        "description": "Fetch company by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get company successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/CompanyEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "companies"
        ],
        "summary": "Update company of ID",
        "description": "Update company of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for the company",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CompanyCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update company successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/CompanyEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "companies"
        ],
        "summary": "Delete company by ID",
        "description": "Delete company by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete company successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/CompanyEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/locations": {
      "post": {
        "tags": [
          "locations"
        ],
        "summary": "Create a new location",
        "description": "Adds a new location to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new location data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LocationCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Location created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/LocationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get all locations",
        "description": "Fetch all locations from the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get locations successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/location": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get current location",
        "description": "Fetch currently authenticated location.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get location successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/LocationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/locations/:id": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get location by ID",
        "description": "Fetch location by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get location successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/LocationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "locations"
        ],
        "summary": "Update location of ID",
        "description": "Update location of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for the location",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LocationCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update location successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/LocationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "locations"
        ],
        "summary": "Delete location by ID",
        "description": "Delete location by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete location successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/LocationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/automations": {
      "post": {
        "tags": [
          "Automation"
        ],
        "summary": "Create a new automation",
        "description": "Adds a new automation to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new automation data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AutomationCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Automation created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/AutomationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Get all automation",
        "description": "Fetch all automations.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get automation successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutomationEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/automations/:id": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Get automation by ID",
        "description": "Fetch automation by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Automation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get automation successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/AutomationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Automation"
        ],
        "summary": "Update automation of ID",
        "description": "Update automation of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Automation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for automation",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AutomationCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update automation successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/AutomationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Automation"
        ],
        "summary": "Delete automation by ID",
        "description": "Delete automation by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Automation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete automation successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/AutomationEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/actuator-logs": {
      "post": {
        "tags": [
          "ActuatorLogs"
        ],
        "summary": "Create a new actuator logs",
        "description": "Adds a new actuator logs to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new actuator logs data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActuatorLogsCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ActuatorLogs created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ActuatorLogsEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "ActuatorLogs"
        ],
        "summary": "Get all actuator logs",
        "description": "Fetch all actuator-logs.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get actuator logs successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActuatorLogsEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/actuator-logs/:id": {
      "get": {
        "tags": [
          "ActuatorLogs"
        ],
        "summary": "Get actuator logs by ID",
        "description": "Fetch actuator logs by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ActuatorLogs ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get actuator logs successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ActuatorLogsEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "ActuatorLogs"
        ],
        "summary": "Update actuator logs of ID",
        "description": "Update actuator logs of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ActuatorLogs ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for actuator logs",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActuatorLogsCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update actuator logs successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ActuatorLogsEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ActuatorLogs"
        ],
        "summary": "Delete actuator logs by ID",
        "description": "Delete actuator logs by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ActuatorLogs ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete actuator logs successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ActuatorLogsEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/schedules": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Create a new schedule",
        "description": "Adds a new schedule to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new schedule data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ScheduleCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Schedule created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ScheduleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get all schedule",
        "description": "Fetch all schedules.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get schedule successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/schedules/:id": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get schedule by ID",
        "description": "Fetch schedule by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Schedule ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get schedule successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ScheduleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Update schedule of ID",
        "description": "Update schedule of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Schedule ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for schedule",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ScheduleCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update schedule successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ScheduleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Delete schedule by ID",
        "description": "Delete schedule by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Schedule ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete schedule successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ScheduleEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/sensors": {
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Create a new sensor",
        "description": "Adds a new sensor to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new sensor data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SensorCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Sensor created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SensorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get all sensor",
        "description": "Fetch all sensors.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get sensor successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/sensors/:id": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensor by ID",
        "description": "Fetch sensor by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Sensor ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get sensor successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SensorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sensor"
        ],
        "summary": "Update sensor of ID",
        "description": "Update sensor of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Sensor ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for sensor",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SensorCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update sensor successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SensorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sensor"
        ],
        "summary": "Delete sensor by ID",
        "description": "Delete sensor by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Sensor ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete sensor successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SensorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/type-sensor": {
      "post": {
        "tags": [
          "TypeSensor"
        ],
        "summary": "Create a new type sensor",
        "description": "Adds a new type sensor to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new type sensor data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TypeSensorCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TypeSensor created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/TypeSensorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "TypeSensor"
        ],
        "summary": "Get all type sensor",
        "description": "Fetch all type-sensor.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "paging data",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserQueryEntities"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit data",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserQueryEntities"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "filtering type sensor",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserQueryEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get type sensor successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TypeSensorEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/type-sensor/:id": {
      "get": {
        "tags": [
          "TypeSensor"
        ],
        "summary": "Get type sensor by ID",
        "description": "Fetch type sensor by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "TypeSensor ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get type sensor successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/TypeSensorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "TypeSensor"
        ],
        "summary": "Update type sensor of ID",
        "description": "Update type sensor of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TypeSensor ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for type sensor",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TypeSensorCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update type sensor successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/TypeSensorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TypeSensor"
        ],
        "summary": "Delete type sensor by ID",
        "description": "Delete type sensor by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "TypeSensor ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete type sensor successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/TypeSensorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/things": {
      "post": {
        "tags": [
          "Things"
        ],
        "summary": "Create a new things",
        "description": "Adds a new things to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new things data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ThingsCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Things created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ThingsEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Things"
        ],
        "summary": "Get all things",
        "description": "Fetch all things.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get things successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ThingsEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/things/:id": {
      "get": {
        "tags": [
          "Things"
        ],
        "summary": "Get things by ID",
        "description": "Fetch things by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Things ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get things successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ThingsEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Things"
        ],
        "summary": "Update things of ID",
        "description": "Update things of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Things ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for things",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ThingsCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update things successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ThingsEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Things"
        ],
        "summary": "Delete things by ID",
        "description": "Delete things by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Things ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete things successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ThingsEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/things-log": {
      "post": {
        "tags": [
          "ThingsLog"
        ],
        "summary": "Create a new things logs",
        "description": "Adds a new things logs to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new things logs data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ThingsLogCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ThingsLog created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ThingsLogEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "ThingsLog"
        ],
        "summary": "Get all things logs",
        "description": "Fetch all things-log.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get things logs successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ThingsLogEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/things-log/:id": {
      "get": {
        "tags": [
          "ThingsLog"
        ],
        "summary": "Get things logs by ID",
        "description": "Fetch things logs by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "params",
            "description": "ThingsLog ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get things logs successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ThingsLogEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "ThingsLog"
        ],
        "summary": "Update things logs of ID",
        "description": "Update things logs of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ThingsLog ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for things logs",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ThingsLogCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update things logs successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ThingsLogEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ThingsLog"
        ],
        "summary": "Delete things logs by ID",
        "description": "Delete things logs by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ThingsLog ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete things logs successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ThingsLogEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/sensor_data": {
      "get": {
        "tags": [
          "SensorData"
        ],
        "summary": "Get all sensor data",
        "description": "Fetch all sensor_data.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get sensor data successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorDataEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/sensor_data/{id}": {
      "get": {
        "tags": [
          "SensorData"
        ],
        "summary": "Get sensor data by ID",
        "description": "Fetch sensor data by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "sensorID.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get sensor data successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/SensorDataEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/actuator": {
      "post": {
        "tags": [
          "Actuator"
        ],
        "summary": "Create a new actuator",
        "description": "Adds a new actuator to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new actuator data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActuatorCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Actuator created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ActuatorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Actuator"
        ],
        "summary": "Get all actuator",
        "description": "Fetch all actuator.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get actuator successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActuatorEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/actuator/:id": {
      "get": {
        "tags": [
          "Actuator"
        ],
        "summary": "Get actuator by ID",
        "description": "Fetch actuator by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Actuator ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get actuator successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ActuatorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Actuator"
        ],
        "summary": "Update actuator of ID",
        "description": "Update actuator of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Actuator ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for actuator",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActuatorCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update actuator successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ActuatorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Actuator"
        ],
        "summary": "Delete actuator by ID",
        "description": "Delete actuator by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Actuator ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete actuator successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/ActuatorEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/greenhouses": {
      "post": {
        "tags": [
          "greenhouses"
        ],
        "summary": "Create a new greenhouse",
        "description": "Adds a new greenhouse to the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new greenhouse data to be added",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GreenhouseCreateEntities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Greenhouse created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/GreenhouseEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "greenhouses"
        ],
        "summary": "Get all greenhouses",
        "description": "Fetch all greenhouses from the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get greenhouses successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GreenhouseEntities"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/v1/greenhouse": {
      "get": {
        "tags": [
          "greenhouses"
        ],
        "summary": "Get current greenhouse",
        "description": "Fetch currently authenticated greenhouse.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get greenhouse successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/GreenhouseEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/greenhouses/:id": {
      "get": {
        "tags": [
          "greenhouses"
        ],
        "summary": "Get greenhouse by ID",
        "description": "Fetch greenhouse by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Greenhouse ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get greenhouse successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/GreenhouseEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "greenhouses"
        ],
        "summary": "Update greenhouse of ID",
        "description": "Update greenhouse of ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Greenhouse ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The new data for the greenhouse",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GreenhouseCreateEntities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update greenhouse successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/GreenhouseEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "greenhouses"
        ],
        "summary": "Delete greenhouse by ID",
        "description": "Delete greenhouse by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Greenhouse ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete greenhouse successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "string"
                },
                "message": {
                  "type": "string",
                  "example": "string"
                },
                "data": {
                  "$ref": "#/components/schemas/GreenhouseEntities"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActuatorCreateEntities": {
        "properties": {
          "color": {
            "type": [
              "null",
              "string"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "icon": {
            "type": [
              "null",
              "string"
            ]
          },
          "name": {
            "type": "string"
          },
          "thingsId": {
            "type": [
              "null",
              "number"
            ]
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActuatorEntities": {
        "properties": {
          "color": {
            "type": [
              "null",
              "string"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "icon": {
            "type": [
              "null",
              "string"
            ]
          },
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "thingsId": {
            "type": [
              "null",
              "number"
            ]
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActuatorLogRepository": {
        "type": "object"
      },
      "ActuatorLogRepositoryImpl": {
        "type": "object"
      },
      "ActuatorLogsCreateEntities": {
        "properties": {
          "actuatorId": {
            "type": [
              "null",
              "number"
            ]
          },
          "statusLifeCycle": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "ActuatorLogsEntities": {
        "properties": {
          "actuatorId": {
            "type": [
              "null",
              "number"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "statusLifeCycle": {
            "type": "number"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActuatorLogsQueryEntities": {
        "properties": {
          "actuatorId": {
            "type": "number"
          },
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActuatorQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActuatorRepository": {
        "type": "object"
      },
      "ActuatorRepositoryImpl": {
        "type": "object"
      },
      "AuthRepository": {
        "type": "object"
      },
      "AuthRepositoryImpl": {
        "type": "object"
      },
      "AutomationCreateEntities": {
        "properties": {
          "actutaorId": {
            "type": [
              "null",
              "number"
            ]
          },
          "condition": {
            "type": "string"
          },
          "constanta": {
            "type": "number"
          },
          "range": {
            "type": "number"
          },
          "sensorId": {
            "type": [
              "null",
              "number"
            ]
          },
          "status_lifecycle": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "AutomationEntities": {
        "properties": {
          "actutaorId": {
            "type": [
              "null",
              "number"
            ]
          },
          "condition": {
            "type": "string"
          },
          "constanta": {
            "type": "number"
          },
          "id": {
            "type": "number"
          },
          "range": {
            "type": "number"
          },
          "sensorId": {
            "type": [
              "null",
              "number"
            ]
          },
          "status_lifecycle": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "AutomationQueryEntities": {
        "properties": {
          "actuatorId": {
            "type": "number"
          },
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          },
          "sensorId": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "AutomationRepository": {
        "type": "object"
      },
      "AutomationRepositoryImpl": {
        "type": "object"
      },
      "CompanyCreateEntities": {
        "properties": {
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompanyEntities": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompanyQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompanyRepository": {
        "type": "object"
      },
      "CompanyRepositoryImpl": {
        "type": "object"
      },
      "GreenhouseCreateEntities": {
        "properties": {
          "deescription": {
            "type": [
              "null",
              "string"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GreenhouseEntities": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deescription": {
            "type": [
              "null",
              "string"
            ]
          },
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GreenhouseQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GreenhouseRepository": {
        "type": "object"
      },
      "GreenhouseRepositoryImpl": {
        "type": "object"
      },
      "LocationCreateEntities": {
        "properties": {
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationEntities": {
        "properties": {
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationRepository": {
        "type": "object"
      },
      "LocationRepositoryImpl": {
        "type": "object"
      },
      "QueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RRoleSidebarCreateEntities": {
        "properties": {
          "roleId": {
            "type": "number"
          },
          "sidebarId": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "RRoleSidebarEntities": {
        "properties": {
          "id": {
            "type": "number"
          },
          "roleId": {
            "type": "number"
          },
          "sidebarId": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "RRoleSidebarUpdateEntities": {
        "properties": {
          "roleId": {
            "type": "number"
          },
          "sidebarId": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "RRoleUserCreateEntities": {
        "properties": {
          "roleId": {
            "type": "number"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RRoleUserEntities": {
        "properties": {
          "id": {
            "type": "number"
          },
          "roleId": {
            "type": "number"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RRoleUserUpdateEntities": {
        "type": "object"
      },
      "RefreshTokenCreate": {
        "properties": {
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "username": {
            "type": [
              "null",
              "string"
            ]
          }
        },
        "type": "object"
      },
      "RefreshTokenEntities": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "expiredAt": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "type": "number"
          },
          "refreshToken": {
            "type": "string"
          },
          "userId": {
            "type": [
              "null",
              "number"
            ]
          }
        },
        "type": "object"
      },
      "RefreshTokenUpdate": {
        "properties": {
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResponseEntities": {
        "properties": {
          "data": {},
          "paging": {
            "$ref": "#/definitions/ResponsePagingEntities"
          }
        },
        "type": "object"
      },
      "ResponsePagingEntities": {
        "properties": {
          "pageNow": {
            "type": "number"
          },
          "totalData": {
            "type": "number"
          },
          "totalPage": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "ResponseWithoutPagingEntities": {
        "properties": {
          "data": {}
        },
        "type": "object"
      },
      "RoleCreateEntities": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoleEntities": {
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoleRepository": {
        "type": "object"
      },
      "RoleRepositoryImpl": {
        "type": "object"
      },
      "RoleSidebarCreateOrUpdateEntities": {
        "properties": {
          "create": {
            "type": "boolean"
          },
          "delete": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "roleId": {
            "type": "number"
          },
          "sidebarId": {
            "type": "number"
          },
          "update": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RoleSidebarDetailedEntities": {
        "properties": {
          "create": {
            "type": "boolean"
          },
          "delete": {
            "type": "boolean"
          },
          "id": {
            "type": "number"
          },
          "read": {
            "type": "boolean"
          },
          "roleId": {
            "type": "number"
          },
          "sidebarId": {
            "type": "number"
          },
          "update": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RoleSidebarQueryEntities": {
        "properties": {
          "detail": {
            "type": "string"
          },
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "roleId": {
            "type": "number"
          },
          "search": {
            "type": "string"
          },
          "sidebarId": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "RoleSidebarRepository": {
        "type": "object"
      },
      "RoleSidebarRepositoryImpl": {
        "type": "object"
      },
      "RoleUserRepository": {
        "type": "object"
      },
      "RoleUserRepositoryImpl": {
        "type": "object"
      },
      "ScheduleCreateEntities": {
        "properties": {
          "actuatorId": {
            "type": "number"
          },
          "dayOfWeek": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "duration": {
            "type": "number"
          },
          "hour": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "interval": {
            "type": "number"
          },
          "minute": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "repeat": {
            "type": "number"
          },
          "start_time": {
            "type": "string"
          },
          "status_schedule": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "ScheduleEntities": {
        "properties": {
          "actuatorId": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "dayOfWeek": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "duration": {
            "type": "number"
          },
          "hour": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "interval": {
            "type": "number"
          },
          "minute": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "start_time": {
            "type": "string"
          },
          "status_schedule": {
            "type": "number"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScheduleQueryEntities": {
        "properties": {
          "actuatorId": {
            "type": "number"
          },
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          },
          "statusSchedule": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "ScheduleRepository": {
        "type": "object"
      },
      "ScheduleRepositoryImpl": {
        "type": "object"
      },
      "SensorCreateEntities": {
        "properties": {
          "calibration": {
            "type": "string"
          },
          "icon": {
            "type": [
              "null",
              "string"
            ]
          },
          "name": {
            "type": "string"
          },
          "thingsId": {
            "type": [
              "null",
              "number"
            ]
          },
          "typeSensorId": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "SensorDataEntities": {
        "properties": {
          "sensorId": {
            "type": "number"
          },
          "status": {
            "type": "number"
          },
          "value": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "SensorEntities": {
        "properties": {
          "calibration": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "icon": {
            "type": [
              "null",
              "string"
            ]
          },
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "thingsId": {
            "type": [
              "null",
              "number"
            ]
          },
          "typeSensorId": {
            "type": "number"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SensorQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SensorRepository": {
        "type": "object"
      },
      "SensorRepositoryImpl": {
        "type": "object"
      },
      "SidebarCreateEntities": {
        "properties": {
          "icon": {
            "type": "string"
          },
          "link": {
            "type": [
              "null",
              "string"
            ]
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": [
              "null",
              "string"
            ]
          }
        },
        "type": "object"
      },
      "SidebarEntities": {
        "properties": {
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "link": {
            "type": [
              "null",
              "string"
            ]
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": [
              "null",
              "string"
            ]
          }
        },
        "type": "object"
      },
      "SidebarRepository": {
        "type": "object"
      },
      "SidebarRepositoryImpl": {
        "type": "object"
      },
      "ThingsCreateEntities": {
        "properties": {
          "greenhouseId": {
            "type": [
              "null",
              "number"
            ]
          },
          "icon": {
            "type": "string"
          },
          "isSeperate": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingsEntities": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "greenhouseId": {
            "type": [
              "null",
              "number"
            ]
          },
          "icon": {
            "type": [
              "null",
              "string"
            ]
          },
          "id": {
            "type": "number"
          },
          "isSeperate": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingsLogCreateEntities": {
        "properties": {
          "status": {
            "type": "string"
          },
          "thingsId": {
            "type": [
              "null",
              "number"
            ]
          }
        },
        "type": "object"
      },
      "ThingsLogEntities": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "thingsId": {
            "type": [
              "null",
              "number"
            ]
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingsLogQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingsLogRepository": {
        "type": "object"
      },
      "ThingsLogRepositoryImpl": {
        "type": "object"
      },
      "ThingsQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingsRepository": {
        "type": "object"
      },
      "ThingsRepositoryImpl": {
        "type": "object"
      },
      "TypeSensorCreateEntities": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TypeSensorEntities": {
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TypeSensorQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TypeSensorRepository": {
        "type": "object"
      },
      "TypeSensorRepositoryImpl": {
        "type": "object"
      },
      "UserCreateEntities": {
        "properties": {
          "companyId": {
            "type": [
              "null",
              "number"
            ]
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "signature": {
            "type": [
              "null",
              "string"
            ]
          },
          "status": {
            "type": [
              "null",
              "number"
            ]
          },
          "unitId": {
            "type": [
              "null",
              "number"
            ]
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserEntities": {
        "properties": {
          "companyId": {
            "type": [
              "null",
              "number"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserQueryEntities": {
        "properties": {
          "isDelete": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserRepository": {
        "type": "object"
      },
      "UserRepositoryImpl": {
        "type": "object"
      },
      "authEntities": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}